14:27:39 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:33:39 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:37:57 high: script_on_saltmaster.parse_salt_event({'tag': '20170906143757334033', 'data': {'_stamp': '2017-09-06T06:37:57.334261', 'minions': ['cobbler']}}) (55796f27-38b1-4d26-a5f0-05d36a90cdd2)
14:37:57 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:37:57 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:37:57 high: Job OK (55796f27-38b1-4d26-a5f0-05d36a90cdd2)
14:37:57 Result is kept for 500 seconds
14:37:57 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:37:57 
14:37:57 *** Listening on high, default, low...
14:37:57 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:37:57 high: script_on_saltmaster.parse_salt_event({'tag': 'salt/job/20170906143757334033/new', 'data': {'tgt_type': 'list', 'jid': '20170906143757334033', 'tgt': ['cobbler'], '_stamp': '2017-09-06T06:37:57.334566', 'user': 'salt_api', 'arg': ['ls'], 'fun': 'cmd.run', 'minions': ['cobbler']}}) (67ac1a85-e1f2-4bd9-b12a-5330acb3fd4d)
14:37:57 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:37:57 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:37:57 high: Job OK (67ac1a85-e1f2-4bd9-b12a-5330acb3fd4d)
14:37:57 Result is kept for 500 seconds
14:37:57 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:37:57 
14:37:57 *** Listening on high, default, low...
14:37:57 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:37:57 high: script_on_saltmaster.parse_salt_event({'tag': 'salt/job/20170906143757334033/ret/cobbler', 'data': {'fun_args': ['ls'], 'jid': '20170906143757334033', 'return': 'CentOS-6.7-x86_64-minimal.iso\nCentOS-6.8-x86_64-LiveCD.iso\nCentOS-6.8-x86_64-bin-DVD1.iso\nLiveV3.iso\nanaconda-ks.cfg\nbootstrap-salt.sh\nimg\ninstall-minion.sh\ninstall.log\ninstall.log.syslog\ninstall_salt.sh\nipmitool-modalias.conf\niso\nlibresolv-2.12.so\nlivecd\nlog\npost_server_info.sh\nsalt.tar\ntest.txt\ntftpboot', 'retcode': 0, 'success': True, 'cmd': '_return', '_stamp': '2017-09-06T06:37:57.374039', 'fun': 'cmd.run', 'id': 'cobbler'}}) (e56a7b45-f27f-4e92-b511-8851d7c37241)
14:37:57 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:37:57 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:37:57 high: Job OK (e56a7b45-f27f-4e92-b511-8851d7c37241)
14:37:57 Result is kept for 500 seconds
14:37:57 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:37:57 
14:37:57 *** Listening on high, default, low...
14:37:57 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:43:57 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:48:58 high: script_on_saltmaster.parse_salt_event({'tag': '20170906144858865571', 'data': {'_stamp': '2017-09-06T06:48:58.865795', 'minions': ['cobbler']}}) (fe2b11a2-9e7c-40d9-a7ba-aeea3bd36f4c)
14:48:58 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:48:58 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:48:58 high: Job OK (fe2b11a2-9e7c-40d9-a7ba-aeea3bd36f4c)
14:48:58 Result is kept for 500 seconds
14:48:58 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:48:58 Cleaning registries for queue: high
14:48:58 Cleaning registries for queue: default
14:48:58 Cleaning registries for queue: low
14:48:58 
14:48:58 *** Listening on high, default, low...
14:48:58 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:48:58 high: script_on_saltmaster.parse_salt_event({'tag': 'salt/job/20170906144858865571/new', 'data': {'tgt_type': 'list', 'jid': '20170906144858865571', 'tgt': ['cobbler'], '_stamp': '2017-09-06T06:48:58.866083', 'user': 'salt_api', 'arg': [], 'fun': 'cmd.run', 'minions': ['cobbler']}}) (d0cb8d2f-1c23-422b-bb6b-196b5fb2a12b)
14:48:58 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:48:58 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:48:58 high: Job OK (d0cb8d2f-1c23-422b-bb6b-196b5fb2a12b)
14:48:58 Result is kept for 500 seconds
14:48:58 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:48:58 
14:48:58 *** Listening on high, default, low...
14:48:58 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:48:58 high: script_on_saltmaster.parse_salt_event({'tag': 'salt/job/20170906144858865571/ret/cobbler', 'data': {'fun_args': [], 'jid': '20170906144858865571', 'return': 'Passed invalid arguments to cmd.run: run() takes at least 1 non-keyword argument (0 given)\n\n    Execute the passed command and return the output as a string\n\n    Note that ``env`` represents the environment variables for the command, and\n    should be formatted as a dict, or a YAML string which resolves to a dict.\n\n    :param str cmd: The command to run. ex: ``ls -lart /home``\n\n    :param str cwd: The current working directory to execute the command in,\n      defaults to ``/root`` (``C:\\`` in windows)\n\n    :param str stdin: A string of standard input can be specified for the\n      command to be run using the ``stdin`` parameter. This can be useful in cases\n      where sensitive information must be read from standard input.\n\n    :param str runas: User to run script as. If running on a Windows minion you\n      must also pass a password.\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n      parameter will be ignored on non-Windows platforms.\n\n      .. versionadded:: 2016.3.0\n\n    :param str shell: Shell to execute under. Defaults to the system default\n      shell.\n\n    :param bool python_shell: If ``False``, let python handle the positional\n      arguments. Set to ``True`` to use shell features, such as pipes or\n      redirection.\n\n    :param bool bg: If ``True``, run command in background and do not await or\n      deliver it\'s results\n\n      .. versionadded:: 2016.3.0\n\n    :param list env: A list of environment variables to be set prior to\n      execution.\n\n        Example:\n\n        .. code-block:: yaml\n\n            salt://scripts/foo.sh:\n              cmd.script:\n                - env:\n                  - BATCH: \'yes\'\n\n        .. warning::\n\n            The above illustrates a common PyYAML pitfall, that **yes**,\n            **no**, **on**, **off**, **true**, and **false** are all loaded as\n            boolean ``True`` and ``False`` values, and must be enclosed in\n            quotes to be used as strings. More info on this (and other) PyYAML\n            idiosyncrasies can be found :ref:`here <yaml-idiosyncrasies>`.\n\n        Variables as values are not evaluated. So $PATH in the following\n        example is a literal \'$PATH\':\n\n        .. code-block:: yaml\n\n            salt://scripts/bar.sh:\n              cmd.script:\n                - env: "PATH=/some/path:$PATH"\n\n        One can still use the existing $PATH by using a bit of Jinja:\n\n        .. code-block:: jinja\n\n            {% set current_path = salt[\'environ.get\'](\'PATH\', \'/bin:/usr/bin\') %}\n\n            mycommand:\n              cmd.run:\n                - name: ls -l /\n                - env:\n                  - PATH: {{ [current_path, \'/my/special/bin\']|join(\':\') }}\n\n    :param bool clean_env: Attempt to clean out all other shell environment\n      variables and set only those provided in the \'env\' argument to this\n      function.\n\n    :param str template: If this setting is applied then the named templating\n      engine will be used to render the downloaded file. Currently jinja, mako,\n      and wempy are supported\n\n    :param bool rstrip: Strip all whitespace off the end of output before it is\n      returned.\n\n    :param str umask: The umask (in octal) to use when running the command.\n\n    :param str output_loglevel: Control the loglevel at which the output from\n      the command is logged. Note that the command being run will still be logged\n      (loglevel: DEBUG) regardless, unless ``quiet`` is used for this value.\n\n    :param int timeout: A timeout in seconds for the executed process to return.\n\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\n      more interactively to the console and the logs. This is experimental.\n\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\n      Only applies to shell \'powershell\'.\n\n    .. warning::\n        This function does not process commands through a shell\n        unless the python_shell flag is set to True. This means that any\n        shell-specific functionality such as \'echo\' or the use of pipes,\n        redirection or &&, should either be migrated to cmd.shell or\n        have the python_shell=True flag set here.\n\n        The use of python_shell=True means that the shell will accept _any_ input\n        including potentially malicious commands such as \'good_command;rm -rf /\'.\n        Be absolutely certain that you have sanitized your input prior to using\n        python_shell=True\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt \'*\' cmd.run "ls -l | awk \'/foo/{print \\\\$2}\'"\n\n    The template arg can be set to \'jinja\' or another supported template\n    engine to render the command arguments before execution.\n    For example:\n\n    .. code-block:: bash\n\n        salt \'*\' cmd.run template=jinja "ls -l /tmp/{{grains.id}} | awk \'/foo/{print \\\\$2}\'"\n\n    Specify an alternate shell with the shell parameter:\n\n    .. code-block:: bash\n\n        salt \'*\' cmd.run "Get-ChildItem C:\\\\ " shell=\'powershell\'\n\n    A string of standard input can be specified for the command to be run using\n    the ``stdin`` parameter. This can be useful in cases where sensitive\n    information must be read from standard input.:\n\n    .. code-block:: bash\n\n        salt \'*\' cmd.run "grep f" stdin=\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\'\n\n    If an equal sign (``=``) appears in an argument to a Salt command it is\n    interpreted as a keyword argument in the format ``key=val``. That\n    processing can be bypassed in order to pass an equal sign through to the\n    remote shell command by manually specifying the kwarg:\n\n    .. code-block:: bash\n\n        salt \'*\' cmd.run cmd=\'sed -e s/=/:/g\'\n    ', 'success': False, 'cmd': '_return', '_stamp': '2017-09-06T06:48:58.900049', 'fun': 'cmd.run', 'id': 'cobbler', 'out': 'nested'}}) (c7785197-9167-4885-93a8-410ad393916f)
14:48:58 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:48:58 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:48:58 high: Job OK (c7785197-9167-4885-93a8-410ad393916f)
14:48:58 Result is kept for 500 seconds
14:48:58 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:48:58 
14:48:58 *** Listening on high, default, low...
14:48:58 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:51:56 high: script_on_saltmaster.parse_salt_event({'tag': '20170906145156030970', 'data': {'_stamp': '2017-09-06T06:51:56.031196', 'minions': ['cobbler']}}) (7f452daa-186a-4c58-b108-19176f4c58a1)
14:51:56 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:51:56 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:51:56 high: Job OK (7f452daa-186a-4c58-b108-19176f4c58a1)
14:51:56 Result is kept for 500 seconds
14:51:56 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:51:56 
14:51:56 *** Listening on high, default, low...
14:51:56 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:51:56 high: script_on_saltmaster.parse_salt_event({'tag': 'salt/job/20170906145156030970/new', 'data': {'tgt_type': 'list', 'jid': '20170906145156030970', 'tgt': ['cobbler'], '_stamp': '2017-09-06T06:51:56.031540', 'user': 'salt_api', 'arg': [], 'fun': 'cmd.run', 'minions': ['cobbler']}}) (673bf406-0ac7-4ab6-8f6a-dbb3cd862d0d)
14:51:56 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:51:56 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:51:56 high: Job OK (673bf406-0ac7-4ab6-8f6a-dbb3cd862d0d)
14:51:56 Result is kept for 500 seconds
14:51:56 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:51:56 
14:51:56 *** Listening on high, default, low...
14:51:56 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:51:56 high: script_on_saltmaster.parse_salt_event({'tag': 'salt/job/20170906145156030970/ret/cobbler', 'data': {'fun_args': [], 'jid': '20170906145156030970', 'return': 'Passed invalid arguments to cmd.run: run() takes at least 1 non-keyword argument (0 given)\n\n    Execute the passed command and return the output as a string\n\n    Note that ``env`` represents the environment variables for the command, and\n    should be formatted as a dict, or a YAML string which resolves to a dict.\n\n    :param str cmd: The command to run. ex: ``ls -lart /home``\n\n    :param str cwd: The current working directory to execute the command in,\n      defaults to ``/root`` (``C:\\`` in windows)\n\n    :param str stdin: A string of standard input can be specified for the\n      command to be run using the ``stdin`` parameter. This can be useful in cases\n      where sensitive information must be read from standard input.\n\n    :param str runas: User to run script as. If running on a Windows minion you\n      must also pass a password.\n\n    :param str password: Windows only. Required when specifying ``runas``. This\n      parameter will be ignored on non-Windows platforms.\n\n      .. versionadded:: 2016.3.0\n\n    :param str shell: Shell to execute under. Defaults to the system default\n      shell.\n\n    :param bool python_shell: If ``False``, let python handle the positional\n      arguments. Set to ``True`` to use shell features, such as pipes or\n      redirection.\n\n    :param bool bg: If ``True``, run command in background and do not await or\n      deliver it\'s results\n\n      .. versionadded:: 2016.3.0\n\n    :param list env: A list of environment variables to be set prior to\n      execution.\n\n        Example:\n\n        .. code-block:: yaml\n\n            salt://scripts/foo.sh:\n              cmd.script:\n                - env:\n                  - BATCH: \'yes\'\n\n        .. warning::\n\n            The above illustrates a common PyYAML pitfall, that **yes**,\n            **no**, **on**, **off**, **true**, and **false** are all loaded as\n            boolean ``True`` and ``False`` values, and must be enclosed in\n            quotes to be used as strings. More info on this (and other) PyYAML\n            idiosyncrasies can be found :ref:`here <yaml-idiosyncrasies>`.\n\n        Variables as values are not evaluated. So $PATH in the following\n        example is a literal \'$PATH\':\n\n        .. code-block:: yaml\n\n            salt://scripts/bar.sh:\n              cmd.script:\n                - env: "PATH=/some/path:$PATH"\n\n        One can still use the existing $PATH by using a bit of Jinja:\n\n        .. code-block:: jinja\n\n            {% set current_path = salt[\'environ.get\'](\'PATH\', \'/bin:/usr/bin\') %}\n\n            mycommand:\n              cmd.run:\n                - name: ls -l /\n                - env:\n                  - PATH: {{ [current_path, \'/my/special/bin\']|join(\':\') }}\n\n    :param bool clean_env: Attempt to clean out all other shell environment\n      variables and set only those provided in the \'env\' argument to this\n      function.\n\n    :param str template: If this setting is applied then the named templating\n      engine will be used to render the downloaded file. Currently jinja, mako,\n      and wempy are supported\n\n    :param bool rstrip: Strip all whitespace off the end of output before it is\n      returned.\n\n    :param str umask: The umask (in octal) to use when running the command.\n\n    :param str output_loglevel: Control the loglevel at which the output from\n      the command is logged. Note that the command being run will still be logged\n      (loglevel: DEBUG) regardless, unless ``quiet`` is used for this value.\n\n    :param int timeout: A timeout in seconds for the executed process to return.\n\n    :param bool use_vt: Use VT utils (saltstack) to stream the command output\n      more interactively to the console and the logs. This is experimental.\n\n    :param bool encoded_cmd: Specify if the supplied command is encoded.\n      Only applies to shell \'powershell\'.\n\n    .. warning::\n        This function does not process commands through a shell\n        unless the python_shell flag is set to True. This means that any\n        shell-specific functionality such as \'echo\' or the use of pipes,\n        redirection or &&, should either be migrated to cmd.shell or\n        have the python_shell=True flag set here.\n\n        The use of python_shell=True means that the shell will accept _any_ input\n        including potentially malicious commands such as \'good_command;rm -rf /\'.\n        Be absolutely certain that you have sanitized your input prior to using\n        python_shell=True\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt \'*\' cmd.run "ls -l | awk \'/foo/{print \\\\$2}\'"\n\n    The template arg can be set to \'jinja\' or another supported template\n    engine to render the command arguments before execution.\n    For example:\n\n    .. code-block:: bash\n\n        salt \'*\' cmd.run template=jinja "ls -l /tmp/{{grains.id}} | awk \'/foo/{print \\\\$2}\'"\n\n    Specify an alternate shell with the shell parameter:\n\n    .. code-block:: bash\n\n        salt \'*\' cmd.run "Get-ChildItem C:\\\\ " shell=\'powershell\'\n\n    A string of standard input can be specified for the command to be run using\n    the ``stdin`` parameter. This can be useful in cases where sensitive\n    information must be read from standard input.:\n\n    .. code-block:: bash\n\n        salt \'*\' cmd.run "grep f" stdin=\'one\\\\ntwo\\\\nthree\\\\nfour\\\\nfive\\\\n\'\n\n    If an equal sign (``=``) appears in an argument to a Salt command it is\n    interpreted as a keyword argument in the format ``key=val``. That\n    processing can be bypassed in order to pass an equal sign through to the\n    remote shell command by manually specifying the kwarg:\n\n    .. code-block:: bash\n\n        salt \'*\' cmd.run cmd=\'sed -e s/=/:/g\'\n    ', 'success': False, 'cmd': '_return', '_stamp': '2017-09-06T06:51:56.063157', 'fun': 'cmd.run', 'id': 'cobbler', 'out': 'nested'}}) (a67b8cef-df9e-400c-8746-eb1e08420126)
14:51:56 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:51:56 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:51:56 high: Job OK (a67b8cef-df9e-400c-8746-eb1e08420126)
14:51:56 Result is kept for 500 seconds
14:51:56 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:51:56 
14:51:56 *** Listening on high, default, low...
14:51:56 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:55:26 high: script_on_saltmaster.parse_salt_event({'tag': '20170906145526459278', 'data': {'_stamp': '2017-09-06T06:55:26.459487', 'minions': ['cobbler']}}) (b985a49e-78bc-4016-b804-25729fcd3e40)
14:55:26 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:55:26 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:55:26 high: Job OK (b985a49e-78bc-4016-b804-25729fcd3e40)
14:55:26 Result is kept for 500 seconds
14:55:26 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:55:26 
14:55:26 *** Listening on high, default, low...
14:55:26 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:55:26 high: script_on_saltmaster.parse_salt_event({'tag': 'salt/job/20170906145526459278/new', 'data': {'tgt_type': 'list', 'jid': '20170906145526459278', 'tgt': ['cobbler'], '_stamp': '2017-09-06T06:55:26.459742', 'user': 'salt_api', 'arg': ['echo hello'], 'fun': 'cmd.run', 'minions': ['cobbler']}}) (63bfcacd-c7a0-49c7-83d3-813a890ab136)
14:55:26 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:55:26 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:55:26 high: Job OK (63bfcacd-c7a0-49c7-83d3-813a890ab136)
14:55:26 Result is kept for 500 seconds
14:55:26 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:55:26 
14:55:26 *** Listening on high, default, low...
14:55:26 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:55:26 high: script_on_saltmaster.parse_salt_event({'tag': 'salt/job/20170906145526459278/ret/cobbler', 'data': {'fun_args': ['echo hello'], 'jid': '20170906145526459278', 'return': 'hello', 'retcode': 0, 'success': True, 'cmd': '_return', '_stamp': '2017-09-06T06:55:26.490386', 'fun': 'cmd.run', 'id': 'cobbler'}}) (1b97effd-eb8b-483f-ac73-7dd83b1a8062)
14:55:26 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:55:26 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:55:26 high: Job OK (1b97effd-eb8b-483f-ac73-7dd83b1a8062)
14:55:26 Result is kept for 500 seconds
14:55:26 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:55:26 
14:55:26 *** Listening on high, default, low...
14:55:26 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:17 high: script_on_saltmaster.parse_salt_event({'tag': '20170906145617238303', 'data': {'_stamp': '2017-09-06T06:56:17.238538', 'minions': ['cobbler']}}) (d497a25b-69b0-4a83-bc08-e3e9be9cdf01)
14:56:17 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:17 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:17 high: Job OK (d497a25b-69b0-4a83-bc08-e3e9be9cdf01)
14:56:17 Result is kept for 500 seconds
14:56:17 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:17 
14:56:17 *** Listening on high, default, low...
14:56:17 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:17 high: script_on_saltmaster.parse_salt_event({'tag': 'salt/job/20170906145617238303/new', 'data': {'tgt_type': 'list', 'jid': '20170906145617238303', 'tgt': ['cobbler'], '_stamp': '2017-09-06T06:56:17.238814', 'user': 'salt_api', 'arg': ['pwd'], 'fun': 'cmd.run', 'minions': ['cobbler']}}) (38908bd3-0ce9-4cc4-a8df-35b548bf7006)
14:56:17 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:17 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:17 high: Job OK (38908bd3-0ce9-4cc4-a8df-35b548bf7006)
14:56:17 Result is kept for 500 seconds
14:56:17 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:17 
14:56:17 *** Listening on high, default, low...
14:56:17 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:17 high: script_on_saltmaster.parse_salt_event({'tag': 'salt/job/20170906145617238303/ret/cobbler', 'data': {'fun_args': ['pwd'], 'jid': '20170906145617238303', 'return': '/root', 'retcode': 0, 'success': True, 'cmd': '_return', '_stamp': '2017-09-06T06:56:17.272083', 'fun': 'cmd.run', 'id': 'cobbler'}}) (e58ade92-b1f7-4031-b55b-5c231936ef47)
14:56:17 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:17 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:17 high: Job OK (e58ade92-b1f7-4031-b55b-5c231936ef47)
14:56:17 Result is kept for 500 seconds
14:56:17 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:17 
14:56:17 *** Listening on high, default, low...
14:56:17 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:34 high: script_on_saltmaster.parse_salt_event({'tag': '20170906145634369755', 'data': {'_stamp': '2017-09-06T06:56:34.369958', 'minions': ['cobbler']}}) (b0716079-4f24-4f46-b86b-88bac9f4caa3)
14:56:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:34 high: Job OK (b0716079-4f24-4f46-b86b-88bac9f4caa3)
14:56:34 Result is kept for 500 seconds
14:56:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:34 
14:56:34 *** Listening on high, default, low...
14:56:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:34 high: script_on_saltmaster.parse_salt_event({'tag': 'salt/job/20170906145634369755/new', 'data': {'tgt_type': 'list', 'jid': '20170906145634369755', 'tgt': ['cobbler'], '_stamp': '2017-09-06T06:56:34.370195', 'user': 'salt_api', 'arg': ['w'], 'fun': 'cmd.run', 'minions': ['cobbler']}}) (3a2ea042-1770-4eea-b6cd-e479c94b401b)
14:56:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:34 high: Job OK (3a2ea042-1770-4eea-b6cd-e479c94b401b)
14:56:34 Result is kept for 500 seconds
14:56:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:34 
14:56:34 *** Listening on high, default, low...
14:56:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:34 high: script_on_saltmaster.parse_salt_event({'tag': 'salt/job/20170906145634369755/ret/cobbler', 'data': {'fun_args': ['w'], 'jid': '20170906145634369755', 'return': ' 13:56:35 up 1 day, 22:01,  0 users,  load average: 0.00, 0.00, 0.00\nUSER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT', 'retcode': 0, 'success': True, 'cmd': '_return', '_stamp': '2017-09-06T06:56:34.402486', 'fun': 'cmd.run', 'id': 'cobbler'}}) (257b34d3-4a0a-41c0-8f6d-2ee8a325c5a4)
14:56:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:34 high: Job OK (257b34d3-4a0a-41c0-8f6d-2ee8a325c5a4)
14:56:34 Result is kept for 500 seconds
14:56:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
14:56:34 
14:56:34 *** Listening on high, default, low...
14:56:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
15:02:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
15:08:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
15:14:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
15:20:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
15:26:34 Sent heartbeat to prevent worker timeout. Next one should arrive within 420 seconds.
